import streamlit as st
import numpy as np
from streamlit_echarts import st_echarts


#simulation function, output = cum cash inflow over time or list of inflow type
def simulate_gain(clients, days, usd_init, usd_daily, usd_monthly, usd_annual, return_inflows=False) :
    list_days,daily_gain=[],[]
    init_inflow,daily_inflow,monthly_inflow,yearly_inflow=[],[],[],[]
    m_days=[31,28,31,30,31,30,31,31,30,31,30,31]
    ref_n_day=m_days[0]
    i_ref_day=0

    v=0
    for t in range(1, days+1) :
        dg = 0
        dg+=usd_daily
        daily_inflow.append(usd_daily*clients)
        v+=1
        if t==1 :
            dg+=usd_init
            init_inflow.append(usd_init*clients)
        if v % ref_n_day == 0 :
            dg+=usd_monthly
            i_ref_day+=1
            i_ref_day= 0 if i_ref_day > 11 else i_ref_day
            v-=ref_n_day
            ref_n_day=m_days[i_ref_day]
            monthly_inflow.append(usd_monthly*clients)

        if t % np.sum(m_days) == 0 :
            dg+=usd_annual
            yearly_inflow.append(usd_annual*clients)



        daily_gain.append(dg*clients)
        list_days.append(t)

    if return_inflows :
        return {"init_inflow":init_inflow,"daily_inflow":daily_inflow,"monthly_inflow":monthly_inflow,"yearly_inflow":yearly_inflow}
    else :
        return [[x,int(y)] for x,y in zip(list_days, np.cumsum(daily_gain))]


#title
"# Estimate best cash inflow setup"

#description
"""
## ðŸŽˆ Welcome
Interactive tool designed to estimate the potential cash inflow generated by different fee packaging options for your business.
By simulating various scenarios, you can gain valuable insights to inform your pricing and revenue strategy.

## ðŸ“– Instructions

- **Number of Packaging Setups** : Specify the number of different fee packages to compare (1-10).
- **Number of Clients** : Enter the expected number of clients or packages sold for each setup.
- **Simulation Duration** : Define the timeframe (days) for which you want to simulate the cash inflow.

For each fee package, enter the following values:
- **USD Initial Buy** : One-time upfront payment from clients.
- **USD Daily Fee** : Recurring daily charge.
- **USD Monthly Fee**: Recurring monthly charge.
- **USD Annual Fee** : Recurring annual charge.
"""

''

setups={}

col1, col2 = st.columns(2)
nset=col1.number_input("Number of packaging setup", 1, 10, 1, help="Specify the number of different fee packages to compare (1-10)")
clients=col2.number_input("Number of sold packages", 1, 100, 1, help="Enter the expected number of clients or packages sold for each setup")

with st.form("simulation_setup") :
    days = st.number_input("Simulation duration", 1, 5475, 365, help="In days")

    for i in range(1, nset+1) :
        f"### Setup {i}"
        col1,col2,col3,col4 = st.columns(4)
        setups[i]={}
        setups[i]["usd_init"] = col1.number_input(f"USD initial buy", 0, 999999, 0, key=f"Set{i} USD initial buy")
        setups[i]["usd_daily"] = col2.number_input(f"USD daily fee", 0, 999999, 0, key=f"ðŸ’µ Set{i} USD daily fee")
        setups[i]["usd_monthly"] = col3.number_input("USD monthly fee", 0, 999999, 0, key=f"ðŸ’µ Set{i} USD monthly fee")
        setups[i]["usd_annual"] = col4.number_input("USD annual fee", 0, 999999, 0, key=f"ðŸ’µ Set{i} USD annual fee")
    st.form_submit_button("Generate", type="primary")

""
"## âœ¨ Results"
legend_data=[f"Setup{i}" for i in range(1, nset+1)]
options = {"title": {"text": "Gain x Time",
                    "subtext": "Simulation of the cash inflow over time",
                    "left": "center"},
          "legend": {"data": legend_data, "bottom": 10},
          "tooltip": {"order": "valueDesc", "trigger": "axis"},

          "xAxis": {"type": 'value', "name":"Days", "min":0, "max":days},
          "yAxis": {"type": 'value', "name":"USD"},
          "series": [{"data": list(simulate_gain(clients, days, setups[i]["usd_init"], setups[i]["usd_daily"], setups[i]["usd_monthly"], setups[i]["usd_annual"])), "name":f"Setup{i}", "type":"line", "showSymbol": False, "emphasis": {"focus": "series"} } for i in range(1, nset+1)]
          }

st_echarts(options=options, height="500px")

res={"init_inflow":[], "daily_inflow":[], "monthly_inflow":[], "yearly_inflow":[]}
for i in range(1, nset+1):
    simulated_inflows=simulate_gain(clients, days, setups[i]["usd_init"], setups[i]["usd_daily"], setups[i]["usd_monthly"], setups[i]["usd_annual"], return_inflows=True)
    for key in res :
        res[key].append( int(np.sum(simulated_inflows[key])) )

bar_series=[{"name": key, "type": 'bar', "stack": 'total', "label": {"show": True},
             "emphasis": {"focus": "series"},  "data": res[key]} for key in res]

options = {"title": {"text": "Total USD inflows", "subtext": "Simulation of the Total Cash Inflow over time",
                     "left": "center"},
           "tooltip": {"trigger": 'axis', "axisPointer": {"type": "shadow"}},
           "legend": {"bottom": 10},
           "xAxis": {"type": "value", "name":"USD"},
           "yAxis": {"type": 'category', "data" : legend_data},
           "series": bar_series}

st_echarts(options=options, height="500px")
